-- DROP TABLE IF EXISTS SUBACTIVITY;	
-- DROP TABLE IF EXISTS ACTIVITY_GRI;
-- DROP TABLE IF EXISTS GRI;
-- DROP TABLE IF EXISTS ACTIVITY;
-- DROP TABLE IF EXISTS NOTPAY_REASON;
-- DROP TABLE IF EXISTS STATES;
-- DROP TABLE IF EXISTS AREA_HEAD;
-- DROP TABLE IF EXISTS AREA;
-- DROP TABLE IF EXISTS USERS;
-- DROP TABLE IF EXISTS ROLES;
CREATE TABLE IF NOT EXISTS ROLES(
	id_role SERIAL PRIMARY KEY,
	role_description VARCHAR (50) NOT NULL
);

CREATE TABLE IF NOT EXISTS AREAS(
	id_area SERIAL PRIMARY KEY,
	area_description VARCHAR (50) NOT NULL
);

CREATE TABLE IF NOT EXISTS USERS (
	id_user SERIAL PRIMARY KEY,
	name VARCHAR (50) NOT NULL,
	surname VARCHAR (50) NOT NULL,
	email VARCHAR (100) NOT NULL,
	username VARCHAR (70) NOT NULL,
	password VARCHAR (200) NOT NULL,
	id_role INT NOT NULL REFERENCES ROLES(id_role),
	id_area INT REFERENCES AREAS(id_area)
);

CREATE TABLE IF NOT EXISTS AREAS_HEAD (
	ID_AREA_USER SERIAL PRIMARY KEY,
	AREA_HEAD INT REFERENCES USERS(ID_USER),
	AREA INT REFERENCES AREA(ID_AREA)
);


CREATE TABLE IF NOT EXISTS NOTPAYS_REASON(
	ID_NOTPAY_REASON SERIAL PRIMARY KEY,
	DESCRIPTION_NOTPAY_REASON VARCHAR(1000)
);

CREATE TABLE IF NOT EXISTS STATES(
	id_state SERIAL PRIMARY KEY,
	state_description VARCHAR(50)
);

CREATE TABLE IF NOT EXISTS ACTIVITIES (
	id_activity SERIAL PRIMARY KEY,
	activity_title VARCHAR (50) NOT NULL,
	activity_description TEXT NOT NULL,
	activity_mandated INT REFERENCES USERS(id_user),
	relevance INT NOT NULL CHECK (
		relevance >= 0
		and relevance <= 5
	),
	date_start DATE NOT NULL,
	date_end DATE NOT NULL,
	id_state INT REFERENCES STATES(id_state) DEFAULT 1
);

CREATE TABLE IF NOT EXISTS GRI(
	ID_GRI SERIAL PRIMARY KEY,
	GRI_DESCRIPTION VARCHAR (50) NOT NULL,
	GRI_SERIE VARCHAR (50) NOT NULL
);

CREATE TABLE IF NOT EXISTS ACTIVITIES_GRI(
	ID_ACTIVITY_GRI SERIAL PRIMARY KEY,
	ID_ACTIVITY INT NOT NULL REFERENCES ACTIVITIES(ID_ACTIVITY),
	ID_GRI INT NOT NULL REFERENCES GRI(ID_GRI)
);

CREATE TABLE IF NOT EXISTS SUBACTIVITY(
	ID_SUBACTIVITY SERIAL PRIMARY KEY,
	ID_ACTIVITY INT NOT NULL REFERENCES ACTIVITY(ID_ACTIVITY),
	SUBACTIVITY_MANDATED INT NOT NULL REFERENCES USERS(ID_USER),
	SUBATIVITY_TITLE VARCHAR (50) NOT NULL,
	SUBACTIVITY_DESCRIPTION TEXT,
	DURATION DATE NOT NULL,
	TIME_WORK INT,
	TIME_PAID INT,
	TIME_NOT_PAID INT,
	NOTPAY_REASON INT REFERENCES NOTPAY_REASON(ID_NOTPAY_REASON)
);